#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

class BST {
private:
    Node* root;

    Node* insertRec(Node* root, int value) {
        if (root == nullptr)
            return new Node(value);

        if (value < root->data)
            root->left = insertRec(root->left, value);
        else if (value > root->data)
            root->right = insertRec(root->right, value);

        return root;
    }

    Node* searchRec(Node* root, int value) {
        if (root == nullptr || root->data == value)
            return root;

        if (value < root->data)
            return searchRec(root->left, value);
        else
            return searchRec(root->right, value);
    }

    Node* deleteRec(Node* root, int value) {
        if (root == nullptr)
            return root;

        if (value < root->data)
            root->left = deleteRec(root->left, value);
        else if (value > root->data)
            root->right = deleteRec(root->right, value);
        else {
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            }
            else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }

            Node* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = deleteRec(root->right, temp->data);
        }
        return root;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current && current->left != nullptr)
            current = current->left;
        return current;
    }

public:
    BST() {
        root = nullptr;
    }

    void insert(int value) {
        root = insertRec(root, value);
    }

    bool search(int value) {
        Node* result = searchRec(root, value);
        return (result != nullptr);
    }

    void remove(int value) {
        root = deleteRec(root, value);
    }

    void inorderTraversal(Node* root) {
        if (root != nullptr) {
            inorderTraversal(root->left);
            cout << root->data << " ";
            inorderTraversal(root->right);
        }
    }

    void display() {
        inorderTraversal(root);
        cout << endl;
    }
};

int main() {
    BST bst;

    // Insert test cases
    bst.insert(50);
    bst.insert(30);
    bst.insert(20);
    bst.insert(40);
    bst.insert(70);
    bst.insert(60);
    bst.insert(80);

    cout << "Binary Search Tree after insertion: ";
    bst.display();

    // Search test cases
    cout << "Search 20: " << (bst.search(20) ? "Found" : "Not Found") << endl;
    cout << "Search 100: " << (bst.search(100) ? "Found" : "Not Found") << endl;

    // Delete test cases
    bst.remove(20);
    cout << "Binary Search Tree after deletion of 20: ";
    bst.display();

    bst.remove(30);
    cout << "Binary Search Tree after deletion of 30: ";
    bst.display();

    bst.remove(50);
    cout << "Binary Search Tree after deletion of 50: ";
    bst.display();

    return 0;
}
