#include <iostream>
#include <vector>

class Vector3D {
private:
    double x, y, z;

public:
    // Constructor
    Vector3D(double x = 0.0, double y = 0.0, double z = 0.0) : x(x), y(y), z(z) {}

    // Overloaded addition operator for Vector3D + Vector3D
    Vector3D operator+(const Vector3D& other) const {
        return Vector3D(x + other.x, y + other.y, z + other.z);
    }

    // Overloaded subtraction operator for Vector3D - Vector3D
    Vector3D operator-(const Vector3D& other) const {
        return Vector3D(x - other.x, y - other.y, z - other.z);
    }

    // Overloaded scalar multiplication operator for Vector3D * double
    Vector3D operator*(double scalar) const {
        return Vector3D(x * scalar, y * scalar, z * scalar);
    }

    // Overloaded cross product operator for Vector3D x Vector3D
    Vector3D operator*(const Vector3D& other) const {
        return Vector3D(y * other.z - z * other.y,
                        z * other.x - x * other.z,
                        x * other.y - y * other.x);
    }

    // Method to display the vector
    void display() const {
        std::cout << "(" << x << ", " << y << ", " << z << ")";
    }
};

int main() {
    // Create some Vector3D objects
    std::vector<Vector3D> vectors;
    vectors.push_back(Vector3D(1, 2, 3));
    vectors.push_back(Vector3D(4, 5, 6));
    vectors.push_back(Vector3D(7, 8, 9));

    // Display original vectors
    std::cout << "Original Vectors:\n";
    for (const auto& vec : vectors) {
        vec.display();
        std::cout << std::endl;
    }
    std::cout << std::endl;

    // Perform vector operations
    Vector3D sum;
    Vector3D difference;
    Vector3D scalarProduct;
    Vector3D crossProduct;
    
    for (const auto& vec : vectors) {
        sum = sum + vec;
        difference = difference - vec;
        scalarProduct = scalarProduct + (vec * 2.5); // Scalar multiplication by 2.5
    }

    crossProduct = vectors[0] * vectors[1]; // Cross product of first two vectors

    // Display results
    std::cout << "Sum of Vectors: ";
    sum.display();
    std::cout << std::endl;

    std::cout << "Difference of Vectors: ";
    difference.display();
    std::cout << std::endl;

    std::cout << "Scalar Product of Vector: ";
    scalarProduct.display();
    std::cout << std::endl;

    std::cout << "Cross Product of first two Vectors: ";
    crossProduct.display();
    std::cout << std::endl;

    return 0;
}
