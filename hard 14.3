#include <iostream>

class Matrix {
private:
    int rows;
    int cols;
    int** data;

public:
    Matrix(int rows, int cols) : rows(rows), cols(cols) {
        data = new int*[rows];
        for (int i = 0; i < rows; ++i) {
            data[i] = new int[cols];
        }
    }

    // Destructor to free dynamically allocated memory
    ~Matrix() {
        for (int i = 0; i < rows; ++i) {
            delete[] data[i];
        }
        delete[] data;
    }

    // Copy constructor
    Matrix(const Matrix& other) : rows(other.rows), cols(other.cols) {
        data = new int*[rows];
        for (int i = 0; i < rows; ++i) {
            data[i] = new int[cols];
            for (int j = 0; j < cols; ++j) {
                data[i][j] = other.data[i][j];
            }
        }
    }

    // Assignment operator
    Matrix& operator=(const Matrix& other) {
        if (this != &other) {
            // Free current memory
            for (int i = 0; i < rows; ++i) {
                delete[] data[i];
            }
            delete[] data;

            // Copy new data
            rows = other.rows;
            cols = other.cols;
            data = new int*[rows];
            for (int i = 0; i < rows; ++i) {
                data[i] = new int[cols];
                for (int j = 0; j < cols; ++j) {
                    data[i][j] = other.data[i][j];
                }
            }
        }
        return *this;
    }

    // Overloaded addition operator
    Matrix operator+(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            std::cerr << "Matrix dimensions do not match for addition!\n";
            exit(1);
        }

        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    // Overloaded subtraction operator
    Matrix operator-(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            std::cerr << "Matrix dimensions do not match for subtraction!\n";
            exit(1);
        }

        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] - other.data[i][j];
            }
        }
        return result;
    }

    // Overloaded multiplication operator
    Matrix operator*(const Matrix& other) const {
        if (cols != other.rows) {
            std::cerr << "Matrix dimensions do not match for multiplication!\n";
            exit(1);
        }

        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < other.cols; ++j) {
                result.data[i][j] = 0;
                for (int k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }

    // Method to set value at a specific position
    void setValue(int row, int col, int value) {
        if (row >= 0 && row < rows && col >= 0 && col < cols) {
            data[row][col] = value;
        } else {
            std::cerr << "Index out of bounds!\n";
        }
    }

    // Method to get value at a specific position
    int getValue(int row, int col) const {
        if (row >= 0 && row < rows && col >= 0 && col < cols) {
            return data[row][col];
        } else {
            std::cerr << "Index out of bounds!\n";
            exit(1);
        }
    }

    // Method to display matrix
    void display() const {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                std::cout << data[i][j] << "\t";
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    Matrix mat1(2, 3);
    Matrix mat2(2, 3);

    // Assign values to matrices
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 3; ++j) {
            mat1.setValue(i, j, i + j);
            mat2.setValue(i, j, i - j);
        }
    }

    std::cout << "Matrix 1:\n";
    mat1.display();
    std::cout << std::endl;

    std::cout << "Matrix 2:\n";
    mat2.display();
    std::cout << std::endl;

    // Perform matrix operations
    Matrix sum = mat1 + mat2;
    Matrix diff = mat1 - mat2;
    Matrix prod = mat1 * mat2;

    std::cout << "Matrix Addition:\n";
    sum.display();
    std::cout << std::endl;

    std::cout << "Matrix Subtraction:\n";
    diff.display();
    std::cout << std::endl;

    std::cout << "Matrix Multiplication:\n";
    prod.display();
    std::cout << std::endl;

    return 0;
}
