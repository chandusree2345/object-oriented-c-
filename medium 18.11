#include <iostream>
#include <string>

class Vehicle {
protected:
    int speed;
    int fuel;
public:
    Vehicle(int s, int f) : speed(s), fuel(f) {}

    virtual void printDetails() const = 0;
};

class Car : public Vehicle {
public:
    Car(int s, int f) : Vehicle(s, f) {}

    void printDetails() const override {
        std::cout << "Car Details: Speed: " << speed << " km/h, Fuel: " << fuel << " liters" << std::endl;
    }
};

class Bike : public Vehicle {
public:
    Bike(int s, int f) : Vehicle(s, f) {}

    void printDetails() const override {
        std::cout << "Bike Details: Speed: " << speed << " km/h, Fuel: " << fuel << " liters" << std::endl;
    }
};

int main() {
    const int size = 2;
    Vehicle* vehicles[size];

    // Creating instances of Car and Bike
    vehicles[0] = new Car(100, 30);
    vehicles[1] = new Bike(60, 10);

    // Calling printDetails() for each vehicle
    for (int i = 0; i < size; ++i) {
        vehicles[i]->printDetails();
    }

    // Freeing dynamically allocated memory
    for (int i = 0; i < size; ++i) {
        delete vehicles[i];
    }

    return 0;
}
