#include <iostream>
#include <vector>
#include <memory> // For smart pointers

class Shape {
public:
    virtual void draw() const = 0; // Pure virtual function
    virtual ~Shape() {} // Virtual destructor
};

class Circle : public Shape {
public:
    void draw() const override {
        std::cout << "Drawing Circle" << std::endl;
        // Code to draw a circle goes here
    }
};

class Rectangle : public Shape {
public:
    void draw() const override {
        std::cout << "Drawing Rectangle" << std::endl;
        // Code to draw a rectangle goes here
    }
};

class Triangle : public Shape {
public:
    void draw() const override {
        std::cout << "Drawing Triangle" << std::endl;
        // Code to draw a triangle goes here
    }
};

// Function to create an array of Shape pointers and call draw() on each object
void drawShapes(const std::vector<std::unique_ptr<Shape>>& shapes) {
    for (const auto& shape : shapes) {
        shape->draw();
    }
}

int main() {
    std::vector<std::unique_ptr<Shape>> shapes;

    // Dynamically creating objects of different shapes and adding them to the array
    shapes.push_back(std::make_unique<Circle>());
    shapes.push_back(std::make_unique<Rectangle>());
    shapes.push_back(std::make_unique<Triangle>());

    // Drawing each shape
    drawShapes(shapes);

    return 0;
}
