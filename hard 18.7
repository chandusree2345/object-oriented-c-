#include <iostream>
#include <vector>
using namespace std;

class Matrix {
private:
    int rows;
    int cols;
    vector<vector<int>> data;

public:
    Matrix(int r, int c) : rows(r), cols(c) {
        data.resize(rows, vector<int>(cols, 0));
    }

    Matrix(vector<vector<int>>& d) : data(d) {
        rows = d.size();
        cols = d[0].size();
    }

    Matrix operator+(const Matrix& other) {
        if (rows != other.rows || cols != other.cols)
            throw invalid_argument("Matrices must have the same dimensions for addition");

        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    Matrix operator-(const Matrix& other) {
        if (rows != other.rows || cols != other.cols)
            throw invalid_argument("Matrices must have the same dimensions for subtraction");

        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] - other.data[i][j];
            }
        }
        return result;
    }

    Matrix operator*(const Matrix& other) {
        if (cols != other.rows)
            throw invalid_argument("Number of columns in the first matrix must be equal to the number of rows in the second matrix for multiplication");

        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < other.cols; ++j) {
                for (int k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }

    void display() {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
        cout << endl;
    }
};

int main() {
    vector<vector<int>> data1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    vector<vector<int>> data2 = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};
    vector<vector<int>> data3 = {{1, 0}, {0, 1}};
    vector<vector<int>> data4 = {{1, 2, 3}, {4, 5, 6}};

    Matrix matrix1(data1);
    Matrix matrix2(data2);
    Matrix matrix3(data3);
    Matrix matrix4(data4);

    try {
        cout << "Matrix 1:" << endl;
        matrix1.display();

        cout << "Matrix 2:" << endl;
        matrix2.display();

        cout << "Matrix 3:" << endl;
        matrix3.display();

        cout << "Matrix 4:" << endl;
        matrix4.display();

        cout << "Addition of Matrix 1 and Matrix 2:" << endl;
        (matrix1 + matrix2).display();

        cout << "Subtraction of Matrix 1 and Matrix 2:" << endl;
        (matrix1 - matrix2).display();

        cout << "Multiplication of Matrix 3 and Matrix 4:" << endl;
        (matrix3 * matrix4).display();
    }
    catch (const invalid_argument& e) {
        cout << "Error: " << e.what() << endl;
    }

    return 0;
}
