#include <iostream>

class Complex {
private:
    double real;
    double imag;

public:
    Complex(double real = 0.0, double imag = 0.0) : real(real), imag(imag) {}

    friend Complex operator+(const Complex& c1, const Complex& c2);
    friend Complex operator-(const Complex& c1, const Complex& c2);
    friend Complex operator*(const Complex& c1, const Complex& c2);
    friend Complex operator/(const Complex& c1, const Complex& c2);

    void display() const {
        std::cout << real << " + " << imag << "i";
    }
};

// Overloaded addition operator
Complex operator+(const Complex& c1, const Complex& c2) {
    return Complex(c1.real + c2.real, c1.imag + c2.imag);
}

// Overloaded subtraction operator
Complex operator-(const Complex& c1, const Complex& c2) {
    return Complex(c1.real - c2.real, c1.imag - c2.imag);
}

// Overloaded multiplication operator
Complex operator*(const Complex& c1, const Complex& c2) {
    return Complex((c1.real * c2.real) - (c1.imag * c2.imag),
                   (c1.real * c2.imag) + (c1.imag * c2.real));
}

// Overloaded division operator
Complex operator/(const Complex& c1, const Complex& c2) {
    double denominator = c2.real * c2.real + c2.imag * c2.imag;
    double real_part = (c1.real * c2.real + c1.imag * c2.imag) / denominator;
    double imag_part = (c1.imag * c2.real - c1.real * c2.imag) / denominator;
    return Complex(real_part, imag_part);
}

int main() {
    Complex c1(3, 2);
    Complex c2(1, 4);

    std::cout << "c1: ";
    c1.display();
    std::cout << std::endl;

    std::cout << "c2: ";
    c2.display();
    std::cout << std::endl;

    Complex sum = c1 + c2;
    Complex diff = c1 - c2;
    Complex prod = c1 * c2;
    Complex div = c1 / c2;

    std::cout << "Sum: ";
    sum.display();
    std::cout << std::endl;

    std::cout << "Difference: ";
    diff.display();
    std::cout << std::endl;

    std::cout << "Product: ";
    prod.display();
    std::cout << std::endl;

    std::cout << "Division: ";
    div.display();
    std::cout << std::endl;

    return 0;
}
