#include <iostream>
#include <vector>

using namespace std;

class Matrix {
private:
    vector<vector<int>> data;
    int rows;
    int cols;

public:
    // Constructor
    Matrix(int numRows, int numCols) : rows(numRows), cols(numCols) {
        data.resize(rows, vector<int>(cols, 0));
    }

    // Overloading operator + for matrix addition
    Matrix operator+(const Matrix& other) {
        if (rows != other.rows || cols != other.cols) {
            cerr << "Error: Matrix dimensions do not match for addition!" << endl;
            exit(1);
        }

        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    // Overloading operator - for matrix subtraction
    Matrix operator-(const Matrix& other) {
        if (rows != other.rows || cols != other.cols) {
            cerr << "Error: Matrix dimensions do not match for subtraction!" << endl;
            exit(1);
        }

        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] - other.data[i][j];
            }
        }
        return result;
    }

    // Overloading operator * for matrix multiplication
    Matrix operator*(const Matrix& other) {
        if (cols != other.rows) {
            cerr << "Error: Matrix dimensions do not match for multiplication!" << endl;
            exit(1);
        }

        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < other.cols; ++j) {
                for (int k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }

    // Function to set the value at a specific position in the matrix
    void setValue(int row, int col, int value) {
        if (row >= 0 && row < rows && col >= 0 && col < cols) {
            data[row][col] = value;
        } else {
            cerr << "Error: Index out of range!" << endl;
        }
    }

    // Function to display the matrix
    void display() {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    Matrix A(2, 3);
    A.setValue(0, 0, 1);
    A.setValue(0, 1, 2);
    A.setValue(0, 2, 3);
    A.setValue(1, 0, 4);
    A.setValue(1, 1, 5);
    A.setValue(1, 2, 6);

    Matrix B(3, 2);
    B.setValue(0, 0, 1);
    B.setValue(0, 1, 2);
    B.setValue(1, 0, 3);
    B.setValue(1, 1, 4);
    B.setValue(2, 0, 5);
    B.setValue(2, 1, 6);

    cout << "Matrix A:" << endl;
    A.display();
    cout << "Matrix B:" << endl;
    B.display();

    Matrix C = A + B;
    cout << "Addition (A + B):" << endl;
    C.display();

    Matrix D = A - B;
    cout << "Subtraction (A - B):" << endl;
    D.display();

    Matrix E = A * B;
    cout << "Multiplication (A * B):" << endl;
    E.display();

    return 0;
}
