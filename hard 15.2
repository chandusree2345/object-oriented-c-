#include <iostream>

class Node {
public:
    int data;
    Node* next;

    // Constructor
    Node(int val) : data(val), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;

public:
    // Constructor to initialize with an array of elements
    LinkedList(int arr[], int n) {
        head = nullptr;
        for (int i = n - 1; i >= 0; --i) {
            Node* newNode = new Node(arr[i]);
            newNode->next = head;
            head = newNode;
        }
    }

    // Destructor
    ~LinkedList() {
        Node* current = head;
        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }
        head = nullptr; // Optional: Set head to nullptr after deletion
    }

    // Method to display the linked list
    void display() const {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    // Creating a linked list with an array of elements
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    LinkedList list(arr, n);

    // Displaying the linked list
    std::cout << "Linked List:" << std::endl;
    list.display();

    return 0;
}
